<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>comment</key>
	<string>Based on work from github.com/frou/GoFeather and github.com/DisposaBoy/GoSublime</string>
	<key>fileTypes</key>
	<array>
		<string>sgo</string>
	</array>
	<key>firstLineMatch</key>
	<string>-[*]-( Mode:)? SGo -[*]-</string>
	<key>keyEquivalent</key>
	<string>^~G</string>
	<key>name</key>
	<string>SGoSublime: SGo</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>begin</key>
			<string>/\*</string>
			<key>end</key>
			<string>\*/</string>
			<key>name</key>
			<string>comment.block.sgo</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>//</string>
			<key>end</key>
			<string>\z</string>
			<key>name</key>
			<string>comment.line.double-slash.sgo</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>"</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.sgo</string>
				</dict>
			</dict>
			<key>end</key>
			<string>"</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.sgo</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.double.sgo</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string_placeholder</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string_escaped_char</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>`</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.sgo</string>
				</dict>
			</dict>
			<key>end</key>
			<string>`</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.sgo</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.raw.sgo</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string_placeholder</string>
				</dict>
				<dict>
					<key>include</key>
					<string>source.gotemplate</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(true|false|nil|iota)\b</string>
			<key>name</key>
			<string>constant.language.sgo</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b((\d+\.(\d+)?([eE][+-]?\d+)?|\d+[eE][+-]?\d+|\.\d+([eE][+-]?\d+)?)i?)\b</string>
			<key>name</key>
			<string>constant.numeric.floating-point.sgo</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(\d+i|0[xX][0-9A-Fa-f]+|0[0-7]*|[1-9][0-9]*)\b</string>
			<key>name</key>
			<string>constant.numeric.integer.sgo</string>
		</dict>
		<dict>
			<key>match</key>
			<string>'(?:[^'\\]|\\(?:\\|[abfnrtv']|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8}|[0-7]{3}))'</string>
			<key>name</key>
			<string>constant.other.rune.sgo</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(bool|byte|complex(64|128)|error|float(32|64)|rune|string|u?int(8|16|32|64)?|uintptr)\b</string>
			<key>name</key>
			<string>storage.type.sgo</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>A subset of keyword.other.sgo for flow control keywords.</string>
			<key>match</key>
			<string>\b(break|case|continue|default|defer|else|for|go|goto|if|range|return|select|switch)\b</string>
			<key>name</key>
			<string>keyword.control.sgo</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go|goto|if|import|interface|map|package|range|return|select|struct|switch|type|var)\b</string>
			<key>name</key>
			<string>keyword.other.sgo</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>variable.other.sgo</string>
				</dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.initialize.sgo</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>This matches the 'x := 0' style of variable declaration.</string>
			<key>match</key>
			<string>(?:[[:alpha:]_][[:alnum:]_]*)(?:,\s+[[:alpha:]_][[:alnum:]_]*)*\s*(:=)</string>
			<key>name</key>
			<string>meta.initialization.short.sgo</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?&lt;=(\Afunc|...\))\s)\b(\w+)\b(?=\()</string>
			<key>name</key>
			<string>entity.name.function.sgo</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?&lt;=(\sfunc|....\))\s)\b(\w+)\b(?=\()</string>
			<key>name</key>
			<string>entity.name.function.sgo</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?&lt;=\Atype\s)\b(\w+)\b</string>
			<key>name</key>
			<string>entity.name.type.sgo</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?&lt;=\stype\s)\b(\w+)\b</string>
			<key>name</key>
			<string>entity.name.type.sgo</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(append|cap|close|complex|copy|delete|imag|len|make|new|panic|print|println|real|recover)\b</string>
			<key>name</key>
			<string>support.function.builtin.sgo</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(\w+)\b(?=\()</string>
			<key>name</key>
			<string>support.function.sgo</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(&lt;-)</string>
			<key>name</key>
			<string>keyword.operator.channel.sgo</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(==|!=|&lt;|&lt;=|&gt;|&gt;=)</string>
			<key>name</key>
			<string>keyword.operator.comparison.sgo</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(&amp;&amp;|[|]{2}|!)</string>
			<key>name</key>
			<string>keyword.operator.logical.sgo</string>
		</dict>
		<dict>
			<key>match</key>
			<string>([+]{2})</string>
			<key>name</key>
			<string>keyword.operator.increment.sgo</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(--)</string>
			<key>name</key>
			<string>keyword.decrement.sgo</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(=|(?:[+]|-|[|]|^|[*]|/|%|&lt;&lt;|&gt;&gt;|&amp;|&amp;^)=)</string>
			<key>name</key>
			<string>keyword.operator.assignment.sgo</string>
		</dict>
		<dict>
			<key>match</key>
			<string>([+]|-|[*]|/|%|&amp;|[|]|^|&amp;^|&lt;&lt;|&gt;&gt;)</string>
			<key>name</key>
			<string>keyword.operator.arithmetic.sgo</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(;)</string>
			<key>name</key>
			<string>keyword.operator.semi-colon.sgo</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(,)</string>
			<key>name</key>
			<string>punctuation.definition.comma.sgo</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(\\)</string>
			<key>name</key>
			<string>punctuation.definition.backslash.sgo</string>
		</dict>
		<dict>
			<key>match</key>
			<string>([.])</string>
			<key>name</key>
			<string>punctuation.definition.dot.sgo</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(:)</string>
			<key>name</key>
			<string>punctuation.definition.colon.sgo</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(\[|\]|{|}|\(|\))</string>
			<key>name</key>
			<string>punctuation.definition.bracket.sgo</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>string_escaped_char</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\(\\|[abfnrtv'"]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8}|[0-7]{3})</string>
					<key>name</key>
					<string>constant.character.escape.sgo</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\.</string>
					<key>name</key>
					<string>invalid.illegal.unknown-escape.sgo</string>
				</dict>
			</array>
		</dict>
		<key>string_placeholder</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?x)%
                        (\d+\$)?                                    # field (argument #)
                        [#0\- +']*                                  # flags
                        [,;:_]?                                     # separator character (AltiVec)
                        ((-?\d+)|\*(-?\d+\$)?)?                     # minimum field width
                        (\.((-?\d+)|\*(-?\d+\$)?)?)?                # precision
                        [diouxXDOUeEfFgGaAcCsSqpnvtTbyYhHmMzZ%]     # conversion type
                    </string>
					<key>name</key>
					<string>constant.other.placeholder.sgo</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.sgo</string>
	<key>uuid</key>
	<string>a38c91e3-6600-4c5e-b8e2-959b01d2cc51</string>
</dict>
</plist>
