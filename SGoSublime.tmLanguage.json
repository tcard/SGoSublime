{
	"comment": "SGo allows any Unicode character to be used in identifiers, so our identifier regex is: \\b([[:alpha:]_]+[[:alnum:]_]*)\\b",
	"firstLineMatch": "-[*]-( Mode:)? SGo -[*]-",
	"name": "SGoSublime",
	"repository": {
		"fn_parens": {
			"patterns": [
				{
					"include": "#basic_things"
				},
				{
					"include": "#function_calls"
				}
			],
			"begin": "\\(",
			"end": "\\)",
			"name": "meta.parens.sgo"
		},
		"basic_things": {
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#initializers"
				},
				{
					"include": "#access"
				},
				{
					"include": "#strings"
				},
				{
					"include": "#keywords"
				}
			]
		},
		"plain_function_declaration": {
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#function_block"
				}
			],
			"begin": "(?x)    \t            ^[[:blank:]]*(func)\\s*\n    \t            (?: ([[:alpha:]_][[:alnum:]_]*)? )          # name of function is optional\n    \t            (?: \\( ((?:[\\[\\]\\w\\d\\s\\/,._*&<>-]|(?:interface\\{\\}))*)? \\) )             # required braces for parameters (even if empty)\n    \t            \\s*\n    \t            (?: \\(? ((?:[\\[\\]\\w\\d\\s,._*&<>-]|(?:interface\\{\\}))*) \\)? )?             # optional return types, optionally within braces\n    \t    ",
			"end": "(?<=\\})",
			"name": "meta.function.plain.sgo",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.sgo"
				},
				"3": {
					"name": "variable.parameters.sgo"
				},
				"2": {
					"name": "entity.name.function.sgo"
				},
				"4": {
					"name": "variable.return-types.sgo"
				}
			}
		},
		"exported_variables": {
			"comment": "This is kinda hacky, in order to get the 'var' scoped the right way again.",
			"name": "variable.exported.sgo",
			"match": "(?<=\\s|\\[\\])([[:upper:]][[:alnum:]_]*)(?=\\W+)"
		},
		"string_escaped_char": {
			"patterns": [
				{
					"name": "constant.character.escape.sgo",
					"match": "\\\\(\\\\|[abfnrutv'\"]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8}|[0-7]{3})"
				},
				{
					"name": "invalid.illegal.unknown-escape.sgo",
					"match": "\\\\."
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"captures": {
						"1": {
							"name": "meta.toc-list.banner.block.sgo"
						}
					},
					"name": "comment.block.sgo",
					"match": "^/\\* =(\\s*.*?)\\s*= \\*/$\\n?"
				},
				{
					"captures": {
						"0": {
							"name": "punctuation.definition.comment.sgo"
						}
					},
					"begin": "/\\*",
					"end": "\\*/",
					"name": "comment.block.sgo"
				},
				{
					"name": "invalid.illegal.stray-commend-end.sgo",
					"match": "\\*/.*\\n"
				},
				{
					"captures": {
						"1": {
							"name": "meta.toc-list.banner.line.sgo"
						}
					},
					"name": "comment.line.double-slash.banner.sgo",
					"match": "^// =(\\s*.*?)\\s*=\\s*$\\n?"
				},
				{
					"patterns": [
						{
							"name": "punctuation.separator.continuation.sgo",
							"match": "(?>\\\\\\s*\\n)"
						}
					],
					"begin": "//",
					"end": "$\\n?",
					"name": "comment.line.double-slash.sgo",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.sgo"
						}
					}
				}
			]
		},
		"string_placeholder": {
			"patterns": [
				{
					"name": "constant.other.placeholder.sgo",
					"match": "(?x)%\n                        (\\d+\\$)?                                    # field (argument #)\n                        [#0\\- +']*                                  # flags\n                        [,;:_]?                                     # separator character (AltiVec)\n                        ((-?\\d+)|\\*(-?\\d+\\$)?)?                     # minimum field width\n                        (\\.((-?\\d+)|\\*(-?\\d+\\$)?)?)?                # precision\n                        [diouxXDOUeEfFgGaAcCsSqpnvtTbyYhHmMzZ%]     # conversion type\n                    "
				},
				{
					"name": "invalid.illegal.placeholder.sgo",
					"match": "%"
				}
			]
		},
		"access": {
			"name": "variable.other.dot-access.sgo",
			"match": "(?<=\\.)[[:alpha:]_][[:alnum:]_]*\\b(?!\\s*\\()"
		},
		"function_block": {
			"patterns": [
				{
					"include": "#function_block_innards"
				}
			],
			"begin": "\\{",
			"end": "\\}",
			"name": "meta.block.sgo"
		},
		"initializers": {
			"patterns": [
				{
					"comment": "This matches the 'var x int = 0' style of variable declaration.",
					"captures": {
						"1": {
							"name": "keyword.control.sgo"
						},
						"0": {
							"name": "variable.other.sgo"
						}
					},
					"name": "meta.initialization.explicit.sgo",
					"match": "^[[:blank:]]*(var)\\s+(?:[[:alpha:]_][[:alnum:]_]*)(?:,\\s+[[:alpha:]_][[:alnum:]_]*)*"
				},
				{
					"comment": "This matches the 'x := 0' style of variable declaration.",
					"captures": {
						"1": {
							"name": "keyword.operator.initialize.sgo"
						},
						"0": {
							"name": "variable.other.sgo"
						}
					},
					"name": "meta.initialization.short.sgo",
					"match": "(?:[[:alpha:]_][[:alnum:]_]*)(?:,\\s+[[:alpha:]_][[:alnum:]_]*)*\\s*(:=)"
				}
			]
		},
		"function_calls": {
			"captures": {
				"1": {
					"name": "punctuation.whitespace.function-call.leading.sgo"
				},
				"3": {
					"name": "punctuation.definition.parameters.sgo"
				},
				"2": {
					"name": "support.function.any-method.sgo"
				}
			},
			"name": "meta.function-call.sgo",
			"match": "(?x)\n                (?: (?= \\s ) (?:(?<=else|new|return) | (?<!\\w)) (\\s+) )?\n                (\\b\n                    (?!(for|if|else|switch|return)\\s*\\()\n                    (?:[[:alpha:]_][[:alnum:]_]*+\\b)            # method name\n                )\n                \\s*(\\()\n            "
		},
		"receiver_function_declaration": {
			"comment": "Version of above with support for declaring a receiver variable.",
			"begin": "(?x)\n    \t            (func)\\s*\n    \t            (?: \\( ((?:[\\[\\]\\w\\d\\s,._*&<>-]|(?:interface\\{\\}))*) \\)\\s+ )                # receiver variable declarations, in brackets\n    \t            (?: ([[:alpha:]_][[:alnum:]_]*)? )          # name of function is optional\n    \t            (?: \\( ((?:[\\[\\]\\w\\d\\s,._*&<>-]|(?:interface\\{\\}))*)? \\) )               # required braces for parameters (even if empty)\n    \t            \\s*\n    \t            (?: \\(? ((?:[\\[\\]\\w\\d\\s,._*&<>-]|(?:interface\\{\\}))*) \\)? )?             # optional return types, optionally within braces\n    \t    ",
			"end": "(?<=\\})",
			"name": "meta.function.receiver.sgo",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.sgo"
				},
				"3": {
					"name": "entity.name.function.sgo"
				},
				"2": {
					"name": "variable.receiver.sgo"
				},
				"5": {
					"name": "variable.return-types.sgo"
				},
				"4": {
					"name": "variable.parameters.sgo"
				}
			},
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#function_block"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.sgo",
					"match": "\\b(break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go|goto|if|import|interface|map|package|range|return|select|struct|switch|type|var)\\b"
				},
				{
					"name": "storage.type.sgo",
					"match": "\\b(bool|byte|complex64|complex128|error|float32|float64|int|int8|int16|int32|int64|rune|string|uint|uint8|uint16|uint32|uint64|uintptr)\\b"
				},
				{
					"name": "storage.modifier.sgo",
					"match": "\\b(const|chan)\\b"
				},
				{
					"name": "constant.language.sgo",
					"match": "\\b(nil|true|false|iota)\\b"
				},
				{
					"name": "constant.numeric.sgo",
					"match": "\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)\\b"
				},
				{
					"name": "support.channel-operator.sgo",
					"match": "(<-)"
				}
			]
		},
		"block_innards": {
			"patterns": [
				{
					"include": "#function_block_innards"
				},
				{
					"include": "#exported_variables"
				}
			]
		},
		"root_parens": {
			"endCaptures": {
				"1": {
					"name": "meta.parens.empty.sgo"
				}
			},
			"begin": "\\(",
			"end": "(?<=\\()(\\))?|(?:\\))",
			"name": "meta.parens.sgo",
			"patterns": [
				{
					"include": "#basic_things"
				},
				{
					"include": "#exported_variables"
				},
				{
					"include": "#function_calls"
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"begin": "\"",
					"end": "\"",
					"name": "string.quoted.double.sgo",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.sgo"
						}
					},
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.sgo"
						}
					},
					"patterns": [
						{
							"include": "#string_placeholder"
						},
						{
							"include": "#string_escaped_char"
						}
					]
				},
				{
					"begin": "'",
					"end": "'",
					"name": "string.quoted.single.sgo",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.sgo"
						}
					},
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.sgo"
						}
					},
					"patterns": [
						{
							"include": "#string_escaped_char"
						}
					]
				},
				{
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.sgo"
						}
					},
					"begin": "`",
					"end": "`",
					"name": "string.quoted.raw.sgo",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.sgo"
						}
					},
					"patterns": [
						{
							"include": "#string_placeholder"
						}
					]
				}
			]
		},
		"block": {
			"patterns": [
				{
					"include": "#block_innards"
				}
			],
			"begin": "\\{",
			"end": "\\}",
			"name": "meta.block.sgo"
		},
		"function_block_innards": {
			"patterns": [
				{
					"include": "#basic_things"
				},
				{
					"captures": {
						"1": {
							"name": "punctuation.whitespace.support.function.leading.sgo"
						},
						"2": {
							"name": "support.function.builtin.sgo"
						}
					},
					"match": "(\\s*)\\b(new|c(lose|ap|opy)|p(anic(ln)?|rint(ln)?)|len|make|delete|re(al|cover)|imag|append)(?:\\b|\\()"
				},
				{
					"include": "#function_block"
				},
				{
					"include": "#function_calls"
				},
				{
					"include": "#fn_parens"
				}
			]
		}
	},
	"foldingStartMarker": "(?x)\n          /\\*\\*(?!\\*)                           # opening C-style comment with 2 asterisks but no third later on\n         |                                      # OR\n          ^                                     # start of line...\n           (?!                                  # ...which does NOT contain...\n              [^{(]*?//                         #    ...a possible bunch of non-opening-braces, followed by a C++ comment\n             |                                  #    OR\n              [^{(]*?/\\*(?!.*?\\*/.*?[{(])       #    ...a possible bunch of non-opening-braces, followed by a C comment with no ending\n           )\n           .*?                                  # ...any characters (or none)...\n           [{(]\\s*                              # ...followed by an open brace and zero or more whitespace...\n           (                                    # ...followed by...\n            $                                   #    ...a dollar...\n             |                                  #    OR\n            //                                  #    ...a C++ comment...\n             |                                  #    OR\n            /\\*(?!.*?\\*/.*\\S)                   #    ...a C comment, so long as no non-whitespace chars follow it..\n           )\n    ",
	"scopeName": "source.sgo",
	"keyEquivalent": "^~G",
	"patterns": [
		{
			"include": "#receiver_function_declaration"
		},
		{
			"include": "#plain_function_declaration"
		},
		{
			"include": "#basic_things"
		},
		{
			"include": "#exported_variables"
		},
		{
			"patterns": [
				{
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.sgo"
						}
					},
					"begin": "\"",
					"end": "\"",
					"name": "string.quoted.double.import.sgo",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.sgo"
						}
					}
				}
			],
			"begin": "^\\s*(import\\s*.+?)\\n\\n",
			"end": "(?=(?://|/\\*))|$",
			"name": "meta.preprocessor.sgo.import",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.import.sgo"
				}
			}
		},
		{
			"include": "#block"
		},
		{
			"include": "#root_parens"
		},
		{
			"include": "#function_calls"
		}
	],
	"foldingStopMarker": "(?<!\\*)\\*\\*/|^\\s*[})]",
	"fileTypes": [
		"sgo"
	],
	"uuid": "f71e23f5-9c93-4854-bcb3-9c0085e2ffae"
}
